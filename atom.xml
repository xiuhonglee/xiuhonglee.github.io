<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>xiuhong</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://xiuhonglee.com/"/>
  <updated>2016-09-06T05:18:51.000Z</updated>
  <id>http://xiuhonglee.com/</id>
  
  <author>
    <name>修鸿</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>css-charset-utf-8</title>
    <link href="http://xiuhonglee.com/2016/09/06/css-charset-utf-8/"/>
    <id>http://xiuhonglee.com/2016/09/06/css-charset-utf-8/</id>
    <published>2016-09-06T04:03:32.000Z</published>
    <updated>2016-09-06T05:18:51.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.w3.org/International/questions/qa-css-charset.en.html" target="_blank" rel="external">原文☞ W3C</a></p>
<h4 id="u5728css_u4E2D_u58F0_u660E_u5B57_u7B26_u7F16_u7801"><a href="#u5728css_u4E2D_u58F0_u660E_u5B57_u7B26_u7F16_u7801" class="headerlink" title="在css中声明字符编码"></a>在css中声明字符编码</h4>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://www.w3.org/International/questions/qa-css-charset.en.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;原文☞ W3C&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&quot;u5728c
    
    </summary>
    
    
      <category term="css" scheme="http://xiuhonglee.com/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>linux设置全局命令</title>
    <link href="http://xiuhonglee.com/2016/08/28/linuxset-environmental/"/>
    <id>http://xiuhonglee.com/2016/08/28/linuxset-environmental/</id>
    <published>2016-08-28T04:27:38.000Z</published>
    <updated>2016-08-28T13:07:11.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.digitalocean.com/community/tutorials/how-to-read-and-set-environmental-and-shell-variables-on-a-linux-vps" target="_blank" rel="external">原文：How To Read and Set Environmental and Shell Variables on a Linux VPS</a></p>
<blockquote>
<p>需求：想自定义一些shell命令可以在全局应用。每次提交代码，git add . &amp; git commit -m ‘xxx’，是否可使用一个命令实现上面的需求。</p>
</blockquote>
<h5 id="1-__u4ECB_u7ECD"><a href="#1-__u4ECB_u7ECD" class="headerlink" title="1. 介绍"></a>1. 介绍</h5><p>When interacting with your server through a shell session, there are many pieces of information that your shell compiles to determine its behavior and access to resources. Some of these settings are contained within configuration settings and others are determined by user input.</p>
<p>One way that the shell keeps track of all of these settings and details is through an area it maintains called the environment. The environment is an area that the shell builds every time that it starts a session that contains variables that define system properties.</p>
<p>In this guide, we will discuss how to interact with the environment and read or set environmental and shell variables interactively and through configuration files. We will be using an Ubuntu 12.04 VPS as an example, but these details should be relevant on any Linux system.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://www.digitalocean.com/community/tutorials/how-to-read-and-set-environmental-and-shell-variables-on-a-linux-vps&quot; target=&quot;_
    
    </summary>
    
    
      <category term="Linux" scheme="http://xiuhonglee.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>render-blocking-css</title>
    <link href="http://xiuhonglee.com/2016/08/22/render-blocking-css/"/>
    <id>http://xiuhonglee.com/2016/08/22/render-blocking-css/</id>
    <published>2016-08-22T10:26:13.000Z</published>
    <updated>2016-09-07T02:59:38.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://developers.google.com/web/fundamentals/performance/critical-rendering-path/render-blocking-css?hl=en" target="_blank" rel="external">内容来自Google Developers</a></p>
<blockquote>
<p>上节提到关键渲染路径，渲染页面需要等待构建完成DOM树和CSSOM树。CSS是阻塞渲染资源(渲染页面的关键资源)，浏览器在未构建完CSSOM树之前是不会进行页面渲染的。</p>
</blockquote>
<ul>
<li>媒体查询(media queries): 可以用来说明CSS resources是否为阻塞渲染资源</li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">link</span> <span class="attribute">href</span>=<span class="value">"style.css"</span> <span class="attribute">rel</span>=<span class="value">"stylesheet"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">link</span> <span class="attribute">href</span>=<span class="value">"style.css"</span> <span class="attribute">rel</span>=<span class="value">"stylesheet"</span> <span class="attribute">media</span>=<span class="value">"all"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">link</span> <span class="attribute">href</span>=<span class="value">"print.css"</span> <span class="attribute">rel</span>=<span class="value">"stylesheet"</span> <span class="attribute">media</span>=<span class="value">"print"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">link</span> <span class="attribute">href</span>=<span class="value">"other.css"</span> <span class="attribute">rel</span>=<span class="value">"stylesheet"</span> <span class="attribute">media</span>=<span class="value">"(min-width: 40em)"</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>第一条和第二条等价</li>
<li>第三条只会在文档被打印（打印预览效果）时，进行渲染，使用覆盖media=”all”样式来实现</li>
<li>第四条会根据页面宽度来判断是否生效</li>
<li>不论是否声明了media query，所有样式文件都会被下载</li>
</ul>
<blockquote>
<p>阻塞资源(css、javascritp)只会阻塞浏览器渲染首屏页面, “渲染阻塞”只与浏览器是否会停止渲染页面而去加载“阻塞资源”相关。对于非阻塞资源，尽管对浏览器来说资源本身优先级比较低，这些非阻塞资源仍然会被下载到浏览器端。</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://developers.google.com/web/fundamentals/performance/critical-rendering-path/render-blocking-css?hl=en&quot; target=&quot;_blank&quot; re
    
    </summary>
    
    
      <category term="前端性能" scheme="http://xiuhonglee.com/tags/%E5%89%8D%E7%AB%AF%E6%80%A7%E8%83%BD/"/>
    
  </entry>
  
  <entry>
    <title>vim</title>
    <link href="http://xiuhonglee.com/2016/08/12/vim/"/>
    <id>http://xiuhonglee.com/2016/08/12/vim/</id>
    <published>2016-08-12T00:38:23.000Z</published>
    <updated>2016-08-12T00:47:50.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://www.vim.org/images/vim_drill_small.JPG" alt=""></p>
<p><a href="https://www.slant.co/search?query=vim" target="_blank" rel="external">☞ slant</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://www.vim.org/images/vim_drill_small.JPG&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.slant.co/search?query=vim&quot; target=&quot;_blank&quot; r
    
    </summary>
    
    
      <category term="vim" scheme="http://xiuhonglee.com/tags/vim/"/>
    
  </entry>
  
  <entry>
    <title>前端性能目录页</title>
    <link href="http://xiuhonglee.com/2016/08/12/performance-content/"/>
    <id>http://xiuhonglee.com/2016/08/12/performance-content/</id>
    <published>2016-08-11T23:59:05.000Z</published>
    <updated>2016-08-22T12:15:02.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://developers.google.com/web/fundamentals/performance/optimizing-content-efficiency/?hl=en" target="_blank" rel="external">内容来自Google Developers</a></p>
<ul>
<li><a href="https://developers.google.com/web/fundamentals/performance/optimizing-content-efficiency/?hl=en" target="_blank" rel="external">优化内容</a><ol>
<li><a href="">Eliminating unnecessary downloads</a></li>
<li><a href="">Optimizing encoding and transfer size of text-based assets</a></li>
<li><a href="">Image optimization</a></li>
<li><a href="">Web font optimization</a></li>
<li><a href="">HTTP caching</a></li>
</ol>
</li>
</ul>
<ul>
<li><a href="http://xiuhonglee.github.io/2016/08/09/Critical-rendering-path/" target="_blank" rel="external">优化关键渲染路径</a><ol>
<li><a href="http://xiuhonglee.github.io/2016/08/09/Constructing-the-Object-model/" target="_blank" rel="external">构建页面对象模型</a></li>
<li><a href="http://xiuhonglee.github.io/2016/08/11/Render-tree/" target="_blank" rel="external">构建渲染树</a></li>
<li><a href="http://xiuhonglee.github.io/2016/08/22/render-blocking-css/" target="_blank" rel="external">Render blocking CSS</a></li>
<li><a href="">Adding interactivity with JavaScript</a></li>
<li><a href="">Measuring the critical rendering path with Navigation Timing</a></li>
<li><a href="">Analyzing critical rendering path performance</a></li>
<li><a href="">Optimizing the critical rendering path</a></li>
<li><a href="">PageSpeed rules and recommendations</a></li>
</ol>
</li>
<li><a href="">渲染性能</a><ol>
<li><a href="">Optimize JavaScript execution</a></li>
<li><a href="">Reduce the scope and complexity of style calculations</a></li>
<li><a href="">Avoid large, complex layouts and layout thrashing</a></li>
<li><a href="">Simplify paint complexity and reduce paint areas</a></li>
<li><a href="">Stick to compositor-only properties and manage layer count</a></li>
<li><a href="">Debounce your input handlers</a></li>
</ol>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://developers.google.com/web/fundamentals/performance/optimizing-content-efficiency/?hl=en&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;
    
    </summary>
    
    
      <category term="前端性能" scheme="http://xiuhonglee.com/tags/%E5%89%8D%E7%AB%AF%E6%80%A7%E8%83%BD/"/>
    
  </entry>
  
  <entry>
    <title>构建渲染树</title>
    <link href="http://xiuhonglee.com/2016/08/11/Render-tree/"/>
    <id>http://xiuhonglee.com/2016/08/11/Render-tree/</id>
    <published>2016-08-10T23:43:15.000Z</published>
    <updated>2016-08-12T00:34:41.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://developers.google.com/web/fundamentals/performance/critical-rendering-path/render-tree-construction?hl=en" target="_blank" rel="external">内容来自Google Developer</a></p>
<h4 id="u672C_u8282_u5185_u5BB9"><a href="#u672C_u8282_u5185_u5BB9" class="headerlink" title="本节内容"></a>本节内容</h4><blockquote>
<p>当浏览器布局可视元素时，会将CSSOM和DOM树链接成为渲染树，最终以像素形式绘制到屏幕上。优化渲染性能的关键在于优化这些渲染的每个阶段。浏览器构建的DOM和CSSOM是两个独立的树形结构。一个负责承载内容，一个负责描述样式，这两部分是如何合并阮然到页面的呢？ </p>
</blockquote>
<ul>
<li>第一步：构建渲染树。浏览器捕获屏幕中的每一个可视DOM，并为每一个结点添加CSSOM样式信息，最终合并成为一个“渲染树”。</li>
</ul>
<p><img src="https://developers.google.com/web/fundamentals/performance/critical-rendering-path/images/render-tree-construction.png" alt=""></p>
<ul>
<li>构建渲染树，具体步骤：</li>
<li>从DOM树的root结点开始遍历每一个可视结点。<ul>
<li>有些结点本身为非可视结点（如script、meta等标签），因为这些标签最终并不会呈现到页面上，浏览器在构建渲染树的过程中会忽略这些标签。</li>
<li>有些结点通过css隐藏的(display:none)的结点，同样会被浏览器忽略。</li>
</ul>
</li>
<li>对每一个可视元素结点匹配对应CSSOM规则。</li>
<li><p>最终层显内容与样式（计算样式）结合的渲染树。</p>
<blockquote>
<p>提示：对于元素(visibility: hidden)和元素(display:none)，前者会被渲染为一个空白内容区(仍占位)，后者不会被渲染。</p>
</blockquote>
</li>
<li><p>第二步：布局。 上面虽然计算得到了渲染树文本、样式信息。在渲染阶段，还需要知道元素在容器设备(<a href="https://developers.google.com/web/fundamentals/design-and-ui/responsive/fundamentals/set-the-viewport" target="_blank" rel="external">viewport</a>)中的确切位置——这将进入“布局”阶段，也称为“重排”。</p>
</li>
</ul>
<blockquote>
<p>为了得到每个元素确切的大小和位置，浏览器需要从root结点遍历并计算出页面元素的几何大小、位置。以下面为例：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">meta</span> <span class="attribute">name</span>=<span class="value">"viewport"</span> <span class="attribute">content</span>=<span class="value">"width=device-width,initial-scale=1"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">title</span>&gt;</span>Critial Path: Hello world!<span class="tag">&lt;/<span class="title">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="title">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">div</span> <span class="attribute">style</span>=<span class="value">"width: 50%"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="title">div</span> <span class="attribute">style</span>=<span class="value">"width: 50%"</span>&gt;</span>Hello world!<span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="title">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
</blockquote>
<ul>
<li>页面包含两个嵌套的div元素，外层占屏幕宽50%，内容占外层div宽度50%（也就是占屏幕宽的25%）。</li>
</ul>
<p><img src="https://developers.google.com/web/fundamentals/performance/critical-rendering-path/images/layout-viewport.png" alt=""></p>
<ul>
<li><p>布局阶段将产生一个个“盒模型”——包含元素相对屏幕(viewport)的精确位置、大小信息：所有的相对尺寸最终会被转化为屏幕上的像素单位（也是相对单位）。</p>
</li>
<li><p>最后：绘制（光栅化-rasterizing）。现在已经知道哪些元素可见，以及可见元素的计算样式、几何信息。浏览器将根据这些信息将节点以像素的形式绘制到页面上。</p>
</li>
</ul>
<blockquote>
<p>上面的每一个步骤，浏览器在底层做了很多处理。Chrome Developer Tool可以捕获到上面每个阶段的耗时，下面是布局阶段耗时（上面hello world示例）。</p>
</blockquote>
<p><img src="https://developers.google.com/web/fundamentals/performance/critical-rendering-path/images/layout-timeline.png" alt=""></p>
<ul>
<li>Chrome Developer Tools Timeline的layout事件会记录渲染树构建、确定元素位置、计算元素占位大小耗时。</li>
<li>布局完成，”Paint Setup”和”Paint”事件会将渲染树以像素的形式呈现到显示器。</li>
<li>构建渲染树、布局、渲染都需要耗费时间。随着构建文档大小的增加，耗时也随之增加。另外，渲染复杂样式如(box shadow)要比简单样式(solid color)耗费更多的性能。</li>
</ul>
<blockquote>
<p>回顾浏览器接收到整个文档的处理流程</p>
</blockquote>
<ul>
<li>处理HTML，构建DOM树</li>
<li>处理CSS， 构建CSSOM树</li>
<li>将DOM和CSSOM树合并为渲染树(render tree)</li>
<li>根据渲染树进行布局、计算每个节点(Node)几何信息</li>
<li>将节点渲染的显示器</li>
</ul>
<blockquote>
<p>上面的示例虽简单，浏览器做的很多底层工作。如果DOM树或CSSOM树被改动，浏览器会重复上面的所有操作，这就是重绘(re-rendered)的代价。</p>
</blockquote>
<p>优化渲染路径上的1-5个步骤，可以更快速渲染出页面内容，而且可以减少页面初始化完成后的屏幕刷新(fps)间隔时间——也就是使显示器达到更大的刷新频率。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://developers.google.com/web/fundamentals/performance/critical-rendering-path/render-tree-construction?hl=en&quot; target=&quot;_blan
    
    </summary>
    
    
      <category term="前端性能" scheme="http://xiuhonglee.com/tags/%E5%89%8D%E7%AB%AF%E6%80%A7%E8%83%BD/"/>
    
  </entry>
  
  <entry>
    <title>构建页面对象模型</title>
    <link href="http://xiuhonglee.com/2016/08/09/Constructing-the-Object-model/"/>
    <id>http://xiuhonglee.com/2016/08/09/Constructing-the-Object-model/</id>
    <published>2016-08-09T14:18:54.000Z</published>
    <updated>2016-08-10T11:04:57.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://developers.google.com/web/fundamentals/performance/critical-rendering-path/constructing-the-object-model?hl=en" target="_blank" rel="external">内容来自Google Developer</a></p>
<blockquote>
<p>浏览器在渲染页面之前，需要构建DOM树和CSSOM树。  </p>
</blockquote>
<h3 id="1-__u672C_u8282_u5185_u5BB9"><a href="#1-__u672C_u8282_u5185_u5BB9" class="headerlink" title="1. 本节内容"></a>1. 本节内容</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># Document Object Model (DOM)</span><br><span class="line"># CSS Object Model (CSSOM)</span><br></pre></td></tr></table></figure>
<p>简要</p>
<ul>
<li>字节 → 字符 → 标记(tokens) → 节点 → 对象模型</li>
<li>HTML被解析为DOM(Document Object Model),CSS被解析为CSSOM(CSS Object Model)</li>
<li>可以通过Chrome DevTools Timeline来检测浏览器构建DOM树和CSSOM树的流程</li>
</ul>
<h3 id="2-_Document_Object_Model_28DOM_29"><a href="#2-_Document_Object_Model_28DOM_29" class="headerlink" title="2. Document Object Model(DOM)"></a>2. Document Object Model(DOM)</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">meta</span> <span class="attribute">name</span>=<span class="value">"viewport"</span> <span class="attribute">content</span>=<span class="value">"width=device-width,initial-scale=1"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">link</span> <span class="attribute">href</span>=<span class="value">"style.css"</span> <span class="attribute">rel</span>=<span class="value">"stylesheet"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">title</span>&gt;</span>Critical Path<span class="tag">&lt;/<span class="title">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="title">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">p</span>&gt;</span>Hello <span class="tag">&lt;<span class="title">span</span>&gt;</span>web performance<span class="tag">&lt;/<span class="title">span</span>&gt;</span> students!<span class="tag">&lt;/<span class="title">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">div</span>&gt;</span><span class="tag">&lt;<span class="title">img</span> <span class="attribute">src</span>=<span class="value">"awesome-photo.jpg"</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="title">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>上例，一段简单的HTML文档包含一段text文本和一张图片。下面来分析浏览器是如何渲染出一张页面的。</p>
</blockquote>
<p><img src="https://developers.google.com/web/fundamentals/performance/critical-rendering-path/images/full-process.png" alt=""></p>
<ul>
<li><strong>转化</strong>：浏览器将从硬盘/网络读到的字节来按照编码规则(如UTF-8)转化为字符串</li>
<li><strong>语义化</strong>：浏览器根据W3C HTML5标准规范将字符串进行语义化解析。- 比如，将”&lt;html&gt;”转化为”<html>“</html></li>
<li><strong>语法分析</strong>：浏览器把语义化标签转化为对象，并为它添加属性和规则</li>
<li><strong>构建DOM树</strong>：HTML语言定义了不同标签之间的关系（有些标签含有嵌套关系），最终这些标签被创建为一个树形结构的对象，此树形结构包含了标签之前最初的的父-子关系：HTML是body的父级元素，body元素又是p标签的父级元素等等</li>
</ul>
<p><img src="https://developers.google.com/web/fundamentals/performance/critical-rendering-path/images/dom-tree.png" alt=""></p>
<blockquote>
<p>浏览器的整个解析过程最终输出一个文档对象模型(Document Object Model)，浏览器将基于此DOM继续后续的页面构建。浏览器每次接收到HTML之后都要重复上面的操作，整个过程会消耗时间，特别处理大量HTML时。</p>
</blockquote>
<p><img src="https://developers.google.com/web/fundamentals/performance/critical-rendering-path/images/dom-timeline.png" alt=""></p>
<ul>
<li><a href="https://developers.google.com/web/tools/chrome-devtools/" target="_blank" rel="external">Chrome Developer Tools 文档</a></li>
<li><a href="http://discover-devtools.codeschool.com/chapters/1/challenges/1?locale=en" target="_blank" rel="external">Chrome Developer Tools视频教程</a></li>
</ul>
<blockquote>
<p>如果你打开Chrome DevTools利用timeline来查看页面加载情况，会发现构建DOM的时间（如上例）大概有5ms，像大多数应用那样会加载更多的HTML，构建DOM的时间会更长些。对于包含繁重的HTML页面，构建DOM的耗时会很容易成为保证页面动画流畅的瓶颈。</p>
</blockquote>
<ul>
<li>浏览器构建的DOM对象只是捕获了文档标签的属性和标签之间的层级/并列关系，页面的元素的布局、样式渲染还需要构建CSSOM(CSS Object Model)。</li>
</ul>
<h3 id="3-_CSS_Object_Model__28CSSOM_29"><a href="#3-_CSS_Object_Model__28CSSOM_29" class="headerlink" title="3. CSS Object Model (CSSOM)"></a>3. CSS Object Model (CSSOM)</h3><blockquote>
<p>上面示例的HTML遇到link标签，会去加载css文件，内容如下：  </p>
</blockquote>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">body</span> <span class="rules">&#123; <span class="rule"><span class="attribute">font-size</span>:<span class="value"> <span class="number">16px</span> </span></span></span>&#125;</span><br><span class="line"><span class="tag">p</span> <span class="rules">&#123; <span class="rule"><span class="attribute">font-weight</span>:<span class="value"> bold </span></span></span>&#125;</span><br><span class="line"><span class="tag">span</span> <span class="rules">&#123; <span class="rule"><span class="attribute">color</span>:<span class="value"> red </span></span></span>&#125;</span><br><span class="line"><span class="tag">p</span> <span class="tag">span</span> <span class="rules">&#123; <span class="rule"><span class="attribute">display</span>:<span class="value"> none </span></span></span>&#125;</span><br><span class="line"><span class="tag">img</span> <span class="rules">&#123; <span class="rule"><span class="attribute">float</span>:<span class="value"> right </span></span></span>&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>同解析HTML一样，浏览器会将CSS解析为CSSDOM，流程与HTML解析过程类似</p>
</blockquote>
<p><img src="https://developers.google.com/web/fundamentals/performance/critical-rendering-path/images/cssom-construction.png" alt=""></p>
<ul>
<li>最终解析出来的CSSOM如下</li>
</ul>
<p><img src="https://developers.google.com/web/fundamentals/performance/critical-rendering-path/images/cssom-tree.png" alt=""></p>
<blockquote>
<p>为何构建树形结构？是因为浏览器计算元素的最终样式时，是从父级元素样式开始计算，逐级层叠添加到DOM元素上    </p>
</blockquote>
<ul>
<li><p>如上例，body下span标签里的文本字体大小会继承body；P标签下的span标签会继承p标签样式而不显示；除了上面自定义的样式外，浏览器本身自带默认样式，这些样式最为顶层样式最终也会层叠在目标标签上。</p>
</li>
<li><p>那构建CSSOM树的时候，浏览器耗时如何？通过Timeline里的“Recalculate Style”事件可以查看。不想DOM解析那样，这里并没有给出”CSS Parsing”，除了构建CSSDOM之外，浏览器还需要计算叠加父级样式后元素的最终样式。</p>
</li>
</ul>
<p><img src="https://developers.google.com/web/fundamentals/performance/critical-rendering-path/images/cssom-timeline.png" alt=""></p>
<blockquote>
<p>页面8个HTML元素，耗时~0.6ms。页面如何渲染出来，毕竟DOM和CSSOM是两个独立对象模型，浏览器是如何将DOM和CSSOM组合在一起，最终渲染出页面的？<a href="https://developers.google.com/web/fundamentals/performance/critical-rendering-path/render-tree-construction?hl=en" target="_blank" rel="external">NEXT</a> </p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://developers.google.com/web/fundamentals/performance/critical-rendering-path/constructing-the-object-model?hl=en&quot; target=&quot;
    
    </summary>
    
    
      <category term="前端性能" scheme="http://xiuhonglee.com/tags/%E5%89%8D%E7%AB%AF%E6%80%A7%E8%83%BD/"/>
    
  </entry>
  
  <entry>
    <title>优化关键渲染路径</title>
    <link href="http://xiuhonglee.com/2016/08/09/Critical-rendering-path/"/>
    <id>http://xiuhonglee.com/2016/08/09/Critical-rendering-path/</id>
    <published>2016-08-09T07:52:18.000Z</published>
    <updated>2016-08-09T14:19:34.000Z</updated>
    
    <content type="html"><![CDATA[<p>内容来自<a href="https://developers.google.com/web/fundamentals/performance/critical-rendering-path/?hl=en" target="_blank" rel="external">Google Developers</a></p>
<h4 id="1-__u4F18_u5316_u5173_u952E_u6E32_u67D3_u8DEF_u5F84"><a href="#1-__u4F18_u5316_u5173_u952E_u6E32_u67D3_u8DEF_u5F84" class="headerlink" title="1. 优化关键渲染路径"></a>1. 优化关键渲染路径</h4><blockquote>
<p>优化关键渲染路径，是根据用户行为来确定浏览器展示内容的优先级；浏览器渲染页面在底层做了很多操作。优化页面性能，需要理解浏览器在接收到HTML、CSS和JavaScript之后如何对其进行解析、渲染的机制。</p>
</blockquote>
<p><img src="https://developers.google.com/web/fundamentals/performance/critical-rendering-path/images/progressive-rendering.png" alt=""></p>
<blockquote>
<p>为了优化关键渲染路径，我们可以从缩短首字节渲染时间来入手。理解关键渲染路径也为开发性能优良的web应用奠定了基础。页面最为理想的渲染时刻应该是在每秒60帧的刷新频率结束的同一时刻。忽略这些，先快速了解下浏览器渲染出一张页面的流程。</p>
</blockquote>
<h5 id="2-_Topics"><a href="#2-_Topics" class="headerlink" title="2. Topics"></a>2. Topics</h5><ul>
<li>Constructing the Object Model</li>
<li>Render-tree construction, layout, and paint</li>
<li>Render blocking CSS</li>
<li>Adding interactivity with JavaScript</li>
<li>Measuring the critical rendering path with Navigation Timing</li>
<li>Analyzing critical rendering path performance</li>
<li>Optimizing the critical rendering path</li>
<li>PageSpeed rules and recommendations</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;内容来自&lt;a href=&quot;https://developers.google.com/web/fundamentals/performance/critical-rendering-path/?hl=en&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Go
    
    </summary>
    
    
      <category term="前端性能" scheme="http://xiuhonglee.com/tags/%E5%89%8D%E7%AB%AF%E6%80%A7%E8%83%BD/"/>
    
  </entry>
  
  <entry>
    <title>前端性能-优化内容</title>
    <link href="http://xiuhonglee.com/2016/08/06/%E5%89%8D%E7%AB%AF%E6%80%A7%E8%83%BD-%E4%BC%98%E5%8C%96%E5%86%85%E5%AE%B9/"/>
    <id>http://xiuhonglee.com/2016/08/06/前端性能-优化内容/</id>
    <published>2016-08-06T12:25:08.000Z</published>
    <updated>2016-08-06T15:17:09.000Z</updated>
    
    <content type="html"><![CDATA[<h5 id="u5185_u5BB9_u6765_u81EA"><a href="#u5185_u5BB9_u6765_u81EA" class="headerlink" title="内容来自"></a>内容来自</h5><p><a href="https://developers.google.com/web/fundamentals/performance/optimizing-content-efficiency/optimize-encoding-and-transfer" target="_blank" rel="external">☞ Google Develper</a></p>
<p><img src="/uploads/Gzip.jpeg" alt=""></p>
<ul>
<li>减少不必要的资源加载最直接的方式是<strong>压缩</strong>请求资源的大小</li>
</ul>
<h5 id="1-__u6570_u636E_u538B_u7F29"><a href="#1-__u6570_u636E_u538B_u7F29" class="headerlink" title="1. 数据压缩"></a>1. 数据压缩</h5><blockquote>
<ul>
<li>当移除掉所有冗余文件后，下一步就是对必要的页面加载资源进行压缩来实现网络传输最小化。对于不同的资源类型（文本、图片、字体），需要使用不同的方法来实现压缩目的。通用的压缩服务可以在Server端通过配置来开启，来对优化加载资源进行预处理，特殊的压缩行为需要开发者编码实现。</li>
<li><p>实现最优的压缩目的需要多种技术来结合实现。</p>
</li>
<li><p>数据压缩就是通过压缩技术和算法对信息进行编码来移除冗余数据。最优化的压缩实现需要结合多种压缩技术和算法逻辑来实现。</p>
</li>
<li><p>数据压缩领域涉及知识较深，下面举例说明文本压缩的具体过程，具体实现比示例复杂，下面为一段传输原文件内容  </p>
</li>
</ul>
</blockquote>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># Below is a secret message, which consists of a set of headers in</span><br><span class="line"># key-value format followed by a newline and the encrypted message.</span><br><span class="line">format: secret-cipher</span><br><span class="line">date: 04/04/14</span><br><span class="line">AAAZZBBBBEEEMMM EEETTTAAA</span><br></pre></td></tr></table></figure>
<ol>
<li>“#”开头为注释</li>
<li>传输内容格式：key-value，中间用”:”分隔</li>
</ol>
<blockquote>
<p>如何对上面文本进行压缩?  </p>
<ul>
<li>去掉注释</li>
<li>通过用较短的别名或ID来代替”HEAD”来缩短文本长度。例如，如果文本中”format”或”date”出现频率较高，可以考虑用ID来分别代替</li>
<li>从文本来看，这显然是端加密后的文件；不过针对此文本开可以进一步压缩（利用自定义方式）；比如”AAA”可以用3A来代替</li>
</ul>
</blockquote>
<p><strong>进过上述方式压缩过的文件↓</strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">format: secret-cipher</span><br><span class="line">date: <span class="number">04</span>/<span class="number">04</span>/<span class="number">14</span></span><br><span class="line"><span class="number">3</span>A2Z4B3E3M <span class="number">3E3</span>T3A</span><br></pre></td></tr></table></figure></p>
<blockquote>
<p>新文本只有56个字符，对比原始文件，压缩率达到72%;对于webpage，如果进行压缩文本，我们并是不去尝试自己写压缩算法，而是综合多种压缩技术来优化传输的文本内容：预处理、针对不同文本文件使用不同的压缩算法</p>
</blockquote>
<h5 id="2-__u9884_u5904_u7406_u548C_u57FA_u4E8E_u6587_u672C_u7C7B_u578B_u7684_u5185_u5BB9_u4F18_u5316"><a href="#2-__u9884_u5904_u7406_u548C_u57FA_u4E8E_u6587_u672C_u7C7B_u578B_u7684_u5185_u5BB9_u4F18_u5316" class="headerlink" title="2. 预处理和基于文本类型的内容优化"></a>2. 预处理和基于文本类型的内容优化</h5><blockquote>
<p>基于文本类型的优化可以实现明显的优化率，而这也应成为发布web应用压缩文本内容的最优解;最优的压缩策略就是彻底删除不必要的文件。当然我们不能任意删除文本中的数据，基于文本类型的文本压缩是考虑到在实现最大压缩率的前提下而不干扰原始文件所表达的信息。  </p>
</blockquote>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">style</span>&gt;</span><span class="css"></span><br><span class="line">     <span class="comment">/* awesome-container is only used on the landing page */</span></span><br><span class="line">     <span class="class">.awesome-container</span> <span class="rules">&#123; <span class="rule"><span class="attribute">font-size</span>:<span class="value"> <span class="number">120%</span> </span></span></span>&#125;</span><br><span class="line">     <span class="class">.awesome-container</span> <span class="rules">&#123; <span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">50%</span> </span></span></span>&#125;</span><br><span class="line">  </span><span class="tag">&lt;/<span class="title">style</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="title">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="tag">&lt;<span class="title">body</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- awesome container content: START --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">div</span>&gt;</span>…<span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- awesome container content: END --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="title">script</span>&gt;</span><span class="actionscript"></span><br><span class="line">     awesomeAnalytics(); <span class="comment">// beacon conversion metrics</span></span><br><span class="line">   </span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="title">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>上面的这段HTML网页包含三段不同的内容：HTML、CSS、Javascript.每段内容对应有不同的语法规则.</p>
<p>下面考虑如何对其进行压缩?</p>
<ul>
<li>去掉代码注释;<code>&lt;!-- xxx --&gt;</code> <code>// xxx</code> <code>/* xxx */</code></li>
<li>合并css规则，删除换行</li>
<li>删除空格&amp;缩进  </li>
</ul>
</blockquote>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">html&gt;<span class="tag">&lt;<span class="title">head</span>&gt;</span><span class="tag">&lt;<span class="title">style</span>&gt;</span><span class="css"><span class="class">.awesome-container</span><span class="rules">&#123;<span class="rule"><span class="attribute">font-size</span>:<span class="value"><span class="number">120%</span></span></span>;<span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">50%</span></span></span></span>&#125;</span><br><span class="line"></span><span class="tag">&lt;/<span class="title">style</span>&gt;</span><span class="tag">&lt;/<span class="title">head</span>&gt;</span><span class="tag">&lt;<span class="title">body</span>&gt;</span><span class="tag">&lt;<span class="title">div</span>&gt;</span>…<span class="tag">&lt;/<span class="title">div</span>&gt;</span><span class="tag">&lt;<span class="title">script</span>&gt;</span><span class="undefined">awesomeAnalytics();</span><br><span class="line"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span><span class="tag">&lt;/<span class="title">body</span>&gt;</span><span class="tag">&lt;/<span class="title">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<ul>
<li>压缩过的文本字符150,相比原文件406字符，压缩率达到63%.压缩后的文件可读性差，只用于发布使用.压缩过的文本并不影响浏览器解析.预处理和基于文本格式的处理收益明显。例如，未压缩的JQuery原始文件300kb左右,压缩后的文件只有100kb左右</li>
<li>类似文本文件的压缩，针对其它格式的文件如图片(image)、视/音频… 也可采用类似的压缩方法。比如数码相机机会在图片中嵌入冗余信息（拍摄时间、地点等）这部分信息可以被压缩掉。不同的设备会携带不同的”冗余”信息，而不同的站点需要或不需要这些”冗余”的信息。比如，类似社交平台的分享网站需要这些附带图片拍摄地点、拍摄时间的”冗余”信息，这时就不应该对这些”冗余”信息进行删除。</li>
<li>简言之，优化内容的第一步是针对目标内容(type)，并根据站点需求来确定压缩的策略。这样才能达到最优的压缩目的</li>
</ul>
</blockquote>
<h5 id="3-__u901A_u8FC7GZIP_u5BF9_u6587_u672C_u8FDB_u884C_u538B_u7F29"><a href="#3-__u901A_u8FC7GZIP_u5BF9_u6587_u672C_u8FDB_u884C_u538B_u7F29" class="headerlink" title="3. 通过GZIP对文本进行压缩"></a>3. 通过GZIP对文本进行压缩</h5><blockquote>
<ul>
<li>GZIP针对基于文本的内容：HTML、CSS、JavaScript表现优异(压缩率可以达到70%-90%)。所有现代浏览器都支持GZIP&gt;，服务器需要进行配置来开启（不过大部分server会默认开启）;一些CDNs需要特别留意是否支持GZIP.</li>
<li>更多关于GZIP的介绍，<a href="">移步这里</a></li>
</ul>
</blockquote>
<table>
<thead>
<tr>
<th>Library</th>
<th>Size</th>
<th>Compressed size</th>
<th>Compression ratio</th>
</tr>
</thead>
<tbody>
<tr>
<td>jquery-1.11.0.js</td>
<td>276 KB</td>
<td>82 KB</td>
<td>70%</td>
</tr>
<tr>
<td>jquery-1.11.0.min.js</td>
<td>94 KB</td>
<td>33 KB</td>
<td>65%</td>
</tr>
<tr>
<td>angular-1.2.15.js</td>
<td>729 KB</td>
<td>182 KB</td>
<td>75%</td>
</tr>
<tr>
<td>angular-1.2.15.min.js</td>
<td>101 KB</td>
<td>37 KB</td>
<td>63%</td>
</tr>
</tbody>
</table>
<blockquote>
<ul>
<li>即使针对.min后的文件，GZIP依然可以进一步压缩,我们要做的只是在Server端开启这项服务即可,<a href="https://github.com/h5bp/server-configs" target="_blank" rel="external">如何开启?</a></li>
<li>查看自己的站点是否开启了GZIP，<a href="http://www.whatsmyip.org/http-compression-test/" target="_blank" rel="external">戳这里</a></li>
</ul>
</blockquote>
<p><img src="https://developers.google.com/web/fundamentals/performance/optimizing-content-efficiency/images/transfer-vs-actual-size.png" alt=""></p>
<h5 id="u76F8_u5173_u8D44_u6599"><a href="#u76F8_u5173_u8D44_u6599" class="headerlink" title="相关资料"></a>相关资料</h5><p><a href="https://www.youtube.com/watch?v=whGwm0Lky2s&amp;feature=youtu.be&amp;t=14m11s" target="_blank" rel="external">☞ Youtube: Gzip介绍</a></p>
<p><a href="http://www.whatsmyip.org/http-headers/" target="_blank" rel="external">☞ Networking Tool</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h5 id=&quot;u5185_u5BB9_u6765_u81EA&quot;&gt;&lt;a href=&quot;#u5185_u5BB9_u6765_u81EA&quot; class=&quot;headerlink&quot; title=&quot;内容来自&quot;&gt;&lt;/a&gt;内容来自&lt;/h5&gt;&lt;p&gt;&lt;a href=&quot;https://develop
    
    </summary>
    
    
      <category term="性能监控" scheme="http://xiuhonglee.com/tags/%E6%80%A7%E8%83%BD%E7%9B%91%E6%8E%A7/"/>
    
  </entry>
  
  <entry>
    <title>Chrome开发者工具-Timeline面板</title>
    <link href="http://xiuhonglee.com/2016/08/05/Chrome%E5%BC%80%E5%8F%91%E8%80%85%E5%B7%A5%E5%85%B7-Timeline%E9%9D%A2%E6%9D%BF/"/>
    <id>http://xiuhonglee.com/2016/08/05/Chrome开发者工具-Timeline面板/</id>
    <published>2016-08-05T07:40:42.000Z</published>
    <updated>2016-08-11T23:24:46.000Z</updated>
    
    <content type="html"><![CDATA[<h5 id="u5185_u5BB9_u6765_u81EA_u261E_Google_Developers"><a href="#u5185_u5BB9_u6765_u81EA_u261E_Google_Developers" class="headerlink" title="内容来自☞ Google Developers"></a>内容来自<a href="https://developers.google.com/web/tools/chrome-devtools/profile/evaluate-performance/timeline-tool?hl=en" target="_blank" rel="external">☞ Google Developers</a></h5><blockquote>
<p>Timeline面板来记录&amp;分析网络交互行为，能够很好地分析网络应用的性能表现  </p>
</blockquote>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/profile/evaluate-performance/imgs/timeline-panel.png" alt=""></p>
<a id="more"></a>
<h5 id="1-_Timeline_u9762_u677F_u4ECB_u7ECD"><a href="#1-_Timeline_u9762_u677F_u4ECB_u7ECD" class="headerlink" title="1. Timeline面板介绍"></a>1. Timeline面板介绍</h5><ul>
<li>☞ 控制(controls): 开启/关闭一次记录行为，选择记录哪条信息</li>
<li>☞ 预览(overview): 页面性能分析报告</li>
<li>☞ 可视化(flame chart)：CPU消耗状况可视化<ul>
<li>☞ 此处有三条垂直线，蓝色代表DOMContentLoaded 事件；绿色代表首次渲染的时刻；红线代表load事件</li>
</ul>
</li>
<li>☞ 详情(Detail): 当选中某一事件后，此会显示事件详情信息；当没有事件被选中的时候，改区域显示选中的时间帧(time frame)详情<br><img src="https://developers.google.com/web/tools/chrome-devtools/profile/evaluate-performance/imgs/timeline-annotated.png" alt=""></li>
</ul>
<h5 id="2-_Overview_u9762_u677F"><a href="#2-_Overview_u9762_u677F" class="headerlink" title="2. Overview面板"></a>2. Overview面板</h5><blockquote>
<p>此区域有三个图表构成  </p>
</blockquote>
<ul>
<li>☞ FPS(frames per second): 帧刷新频率/秒；绿色条越高表示FPS值越高；上方的红色区块表示long frames(?),觉得没啥用（jank）</li>
<li>☞ CPU：CPU资源占用率；面积图表示不同的事件占用的CPU资源</li>
<li>☞ NET：没一种颜色代表一种资源类型。线条越长，说明加载资源的时间越长；线条的浅色部分表示等待时间(wating  time:请求发起的时刻到首字节被加载)；线条的深色部分表示资源的网络传输时间(transfer time: 首字节加载时刻到末字节加载的时刻)；线条的颜色：<strong>HTML</strong>：蓝色；：<strong>script</strong>：黄色；<strong>stylesheet</strong>紫色；<strong>Media</strong>绿色；<strong>其它mix资源</strong>：灰色<br><img src="https://developers.google.com/web/tools/chrome-devtools/profile/evaluate-performance/imgs/overview-annotated.jpg" alt=""></li>
</ul>
<h5 id="3-__u53D1_u8D77_u4E00_u6B21_u8BB0_u5F55_28Make_a_recording_29"><a href="#3-__u53D1_u8D77_u4E00_u6B21_u8BB0_u5F55_28Make_a_recording_29" class="headerlink" title="3. 发起一次记录(Make a recording)"></a>3. 发起一次记录(Make a recording)</h5><blockquote>
<p>打开Timeline面板重载页面，Timeline面板会自动记录重载页面信息(shortcut:cmd+e)</p>
</blockquote>
<p><strong>Tips:</strong></p>
<ul>
<li>☞ 保持记录时间短: 更方便进行分析</li>
<li>☞ 避免不必要的操作行为：避免如鼠标点击、<br>网络载入(network load)等这些多余的动作；比如你想记录点击login按钮后的事件耗时，就不要滚动页面、加载图片等行为</li>
<li>☞ 禁用浏览器缓存：Disable the browser cache</li>
<li>☞ 禁用扩展插件：Chrome的扩展插件会干扰(extraneous)对页面加载时间的分析</li>
</ul>
<h5 id="4-__u67E5_u770B_u8BB0_u5F55_u8BE6_u60C5"><a href="#4-__u67E5_u770B_u8BB0_u5F55_u8BE6_u60C5" class="headerlink" title="4. 查看记录详情"></a>4. 查看记录详情</h5><blockquote>
<p>在图标区(flame chart)选中事件，详情区域显示更多的事件耗时信息</p>
</blockquote>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/profile/evaluate-performance/imgs/details-pane.png" alt=""></p>
<blockquote>
<p>Summary这项tab是所有事件类型的父级面板。其它tab只对特定的事件类型有效.点击查看<a href="https://developers.google.com/web/tools/chrome-devtools/profile/evaluate-performance/performance-reference#common-timeline-event-properties" target="_blank" rel="external">Timeline相关事件类型</a></p>
</blockquote>
<h5 id="4-__u6355_u83B7recording_u671F_u95F4_u7684_u9875_u9762_u622A_u56FE"><a href="#4-__u6355_u83B7recording_u671F_u95F4_u7684_u9875_u9762_u622A_u56FE" class="headerlink" title="4. 捕获recording期间的页面截图"></a>4. 捕获recording期间的页面截图</h5><blockquote>
<p>页面载入时，Timeline面板可获取recording页面截图.control面板默认关闭Screenshots选项，需要手动开启.  </p>
</blockquote>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/profile/evaluate-performance/imgs/timeline-filmstrip.png" alt=""></p>
<blockquote>
<p>将鼠标悬浮在Screenshots上可放大查看，控制鼠标在Screenshots上左右滑动可现实模拟页面加载的动画效果</p>
</blockquote>
<h5 id="5-__u67E5_u770BJavaScript_u4FE1_u606F"><a href="#5-__u67E5_u770BJavaScript_u4FE1_u606F" class="headerlink" title="5. 查看JavaScript信息"></a>5. 查看JavaScript信息</h5><blockquote>
<p>在Timeline记录之前开启control面板中的JS Profile选项，Flame图表中会显示每一个被调用Function信息</p>
</blockquote>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/profile/evaluate-performance/imgs/js-profile.png" alt=""></p>
<h5 id="6-__u67E5_u770Bpainting_u4FE1_u606F"><a href="#6-__u67E5_u770Bpainting_u4FE1_u606F" class="headerlink" title="6. 查看painting信息"></a>6. 查看painting信息</h5><blockquote>
<p>开启control面板中的Paint选项可以获取Paint事件信息.点击Paint Event，可以在overview区域看到新增Paint Profiler选项板，点击可查看详情，柱状图显示。  </p>
</blockquote>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/profile/evaluate-performance/imgs/paint-profiler.png" alt=""></p>
<h5 id="7-__u653E_u5927Timeline_u533A_u57DF"><a href="#7-__u653E_u5927Timeline_u533A_u57DF" class="headerlink" title="7. 放大Timeline区域"></a>7. 放大Timeline区域</h5><blockquote>
<p>可以在overview区域拖动标尺选中Timeline片段，Flame Chart区域会放大显示对应区段；也可通过控制键a、s、w、d来微调选中区域</p>
</blockquote>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/profile/evaluate-performance/imgs/zoom.png" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;h5 id=&quot;u5185_u5BB9_u6765_u81EA_u261E_Google_Developers&quot;&gt;&lt;a href=&quot;#u5185_u5BB9_u6765_u81EA_u261E_Google_Developers&quot; class=&quot;headerlink&quot; title=&quot;内容来自☞ Google Developers&quot;&gt;&lt;/a&gt;内容来自&lt;a href=&quot;https://developers.google.com/web/tools/chrome-devtools/profile/evaluate-performance/timeline-tool?hl=en&quot;&gt;☞ Google Developers&lt;/a&gt;&lt;/h5&gt;&lt;blockquote&gt;
&lt;p&gt;Timeline面板来记录&amp;amp;分析网络交互行为，能够很好地分析网络应用的性能表现  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https://developers.google.com/web/tools/chrome-devtools/profile/evaluate-performance/imgs/timeline-panel.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Chrome Developer Tools" scheme="http://xiuhonglee.com/tags/Chrome-Developer-Tools/"/>
    
  </entry>
  
  <entry>
    <title>Chrome开发者工具-network面板</title>
    <link href="http://xiuhonglee.com/2016/08/03/Chrome%E5%BC%80%E5%8F%91%E8%80%85%E5%B7%A5%E5%85%B7-network-panel/"/>
    <id>http://xiuhonglee.com/2016/08/03/Chrome开发者工具-network-panel/</id>
    <published>2016-08-03T00:17:50.000Z</published>
    <updated>2016-08-06T15:18:09.000Z</updated>
    
    <content type="html"><![CDATA[<h5 id="u5185_u5BB9_u6765_u81EAGoogle_Developers"><a href="#u5185_u5BB9_u6765_u81EAGoogle_Developers" class="headerlink" title="内容来自Google Developers"></a>内容来自<a href="https://developers.google.com/web/tools/chrome-devtools/profile/network-performance/resource-loading?utm_source=dcc&amp;utm_medium=redirect&amp;utm_campaign=2016q3" target="_blank" rel="external">Google Developers</a></h5><blockquote>
<p>使用Network面板来评估站点网络性能</p>
</blockquote>
<p><img src="http://s17.mogucdn.com/p2/160802/upload_38kd0gf4c2kg42d5ll7cba0c6hjkb_1400x713.png" alt=""></p>
<ul>
<li>Network面板记录了每个页面与网络交互的信息，包括详细的时间线数据，HTTP请求和响应头部，cookies等。</li>
</ul>
<h5 id="Network_u9762_u677F_u4ECB_u7ECD"><a href="#Network_u9762_u677F_u4ECB_u7ECD" class="headerlink" title="Network面板介绍"></a>Network面板介绍</h5><blockquote>
<p>Network面板有5个部分组成  </p>
</blockquote>
<ol>
<li><strong>Controls</strong>：控制面板外观&amp;功能</li>
<li><strong>Filters</strong>：筛选请求资源列表内容，可按住<code>cmd</code>进行多选</li>
<li><strong>Overview</strong>：显示加载资源的时间线，垂直堆叠的时间线表示资源在同步加载</li>
<li><strong>Requests Table</strong>：列出了所有被页面加载的资源信息。列表默认按加载的时间顺序排序；单击列表中的资源名可查看详细信息&amp;邮件列表标题可以显示/隐藏标题</li>
<li><strong>Summary</strong>：摘要页面加载资源数目&amp;加载资源大小(kb)&amp;加载时间(s)  </li>
</ol>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/profile/network-performance/imgs/panes.png" alt=""></p>
<blockquote>
<p>页面请求资源列表(Requests Table)默认显示下列信息。也可右键点击标题进行显示/隐藏  </p>
</blockquote>
<ul>
<li><strong>Name</strong>：资源名</li>
<li><strong>Status</strong>：Http状态码</li>
<li><strong>Type</strong>：请求资源的MINI类型</li>
<li><strong>Initiator</strong>：触发请求的进程/实体。取值如下：<ul>
<li><strong>Parser</strong>：Chrome解析器发起的请求</li>
<li><strong>Redirect</strong>：HTTP重定向发起的请求</li>
<li><strong>Script</strong>：脚本发起的请求</li>
<li><strong>Other</strong>：其它进程发起的请求。比如用户通过链接请求跳转页面或用户在地址栏输入URL请求目标页</li>
</ul>
</li>
<li><strong>Size</strong>： 请求资源大小。包括响应头(response headers)+请求体(response body)</li>
<li><p><strong>Time</strong>: 资源响应时间 = 从浏览器开始发起请求 <strong>到</strong> 浏览器接受到资源的最后一个字节所耗费的时间</p>
</li>
<li><p><strong>Timeline</strong>：展示资源请求的时间瀑布流。单击可查看资源加载的详细信息</p>
</li>
</ul>
<h5 id="u8BB0_u5F55Network_u4EA4_u4E92_u884C_u4E3A"><a href="#u8BB0_u5F55Network_u4EA4_u4E92_u884C_u4E3A" class="headerlink" title="记录Network交互行为"></a>记录Network交互行为</h5><blockquote>
<p>Network默认记录页面的网络请求等行为信息。开启/关闭此功能的快捷键<code>cmd</code> + <code>e</code></p>
</blockquote>
<h5 id="u83B7_u53D6Network_u4EA4_u4E92_u8FC7_u7A0B_u4E2D_u7684_u9875_u9762_u622A_u56FE"><a href="#u83B7_u53D6Network_u4EA4_u4E92_u8FC7_u7A0B_u4E2D_u7684_u9875_u9762_u622A_u56FE" class="headerlink" title="获取Network交互过程中的页面截图"></a>获取Network交互过程中的页面截图</h5><blockquote>
<p>Network可以捕获资源加载过程中的页面截图/幻灯片(Filmstrip)。通过点击面板中的<code>camera</code>来开启/关闭此功能  </p>
</blockquote>
<ul>
<li>重载页面获取页面截图，页面截图(screenshot)在<code>overview</code>区域  </li>
</ul>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/profile/network-performance/imgs/filmstrip.png" alt=""><br><strong>Tips</strong>：当鼠标悬浮在截图上面，Timeline区域会显示一条垂直度黄线，这条线标注页面片段(screenshot)加载进来的时间。  </p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/profile/network-performance/imgs/filmstrip-timeline-overlay.png" alt=""><br><strong>Tips</strong>：双击截图可放大截图查看截图状态  </p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/profile/network-performance/imgs/filmstrip-zoom.png" alt=""></p>
<h5 id="u67E5_u770BDOMContentLoaded_u548Cload_u4E8B_u4EF6"><a href="#u67E5_u770BDOMContentLoaded_u548Cload_u4E8B_u4EF6" class="headerlink" title="查看DOMContentLoaded和load事件"></a>查看DOMContentLoaded和load事件</h5><blockquote>
<p>Network面板会高亮两个事件<a href="https://developer.mozilla.org/en-US/docs/Web/Events/DOMContentLoaded" target="_blank" rel="external">DOMContentLoaded</a>和<a href="https://developer.mozilla.org/en-US/docs/Web/Events/load" target="_blank" rel="external">load</a></p>
</blockquote>
<p>DOMContentLoaded事件信息在面板中有两处都用蓝色标记标注。一处在<code>overview</code>用蓝色垂直线标注；另一处在<code>Summary</code>中用蓝色粗体问题标注。  </p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/profile/network-performance/imgs/domcontentloaded.png" alt=""><br>loaded事件用红色标注，一共有三处。两处在<code>overview</code>和<code>summary</code>中，另一处在<code>Requests Table</code>中  </p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/profile/network-performance/imgs/load.png" alt=""></p>
<h5 id="u67E5_u770B_u9875_u9762_u8BF7_u6C42_u8D44_u6E90_u7684_u8BE6_u7EC6_u4FE1_u606F"><a href="#u67E5_u770B_u9875_u9762_u8BF7_u6C42_u8D44_u6E90_u7684_u8BE6_u7EC6_u4FE1_u606F" class="headerlink" title="查看页面请求资源的详细信息"></a>查看页面请求资源的详细信息</h5><blockquote>
<p>单击资源名查看更多信息，一般包含下面四个基本信息  </p>
</blockquote>
<ul>
<li><strong>Headers</strong>：请求资源的HTTP头部信息</li>
<li><strong>Preview</strong>：预览请求资源。JSON/image/text resources</li>
<li><strong>Response</strong>：HTTP响应数据（或为空）</li>
<li><strong>Timing</strong>：资源加载时间线（后有详述）  </li>
</ul>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/profile/network-performance/imgs/network-headers.png" alt=""></p>
<h6 id="u8D44_u6E90_u52A0_u8F7D_u65F6_u95F4_u7EBF"><a href="#u8D44_u6E90_u52A0_u8F7D_u65F6_u95F4_u7EBF" class="headerlink" title="资源加载时间线"></a>资源加载时间线</h6><blockquote>
<p>单击资源详情里的Timing选项(或鼠标悬浮)查看资源加载各环节(<strong>granular breakdown of request lifecycle</strong>)所耗费的时间  </p>
</blockquote>
<p>下面是资源加载耗时点</p>
<ul>
<li>排队等待时间(Queuing)</li>
<li>阻塞时间(stalled)</li>
<li>请求/响应时间(Request/Response)：个人理解为发送的准备时间，不是过程(during)时间</li>
<li>Request的发送时间</li>
<li>等待时间(等待首字节的时间)</li>
<li>内容加载时间(Content Download)  </li>
</ul>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/profile/network-performance/imgs/timing-tab.png" alt=""></p>
<p><a href="https://developers.google.com/web/tools/chrome-devtools/profile/network-performance/understanding-resource-timing" target="_blank" rel="external">Timeline详解</a></p>
<h5 id="u67E5_u770B_u9875_u9762_u8BF7_u6C42_u8D44_u6E90_u4E4B_u95F4_u7684_u5524_u8D77_u548C_u4F9D_u8D56_u5173_u7CFB"><a href="#u67E5_u770B_u9875_u9762_u8BF7_u6C42_u8D44_u6E90_u4E4B_u95F4_u7684_u5524_u8D77_u548C_u4F9D_u8D56_u5173_u7CFB" class="headerlink" title="查看页面请求资源之间的唤起和依赖关系"></a>查看页面请求资源之间的唤起和依赖关系</h5><ul>
<li>按住<code>shift</code> &amp; 鼠标悬浮在资源条目上可以查看资源加载之间的相互依赖关系</li>
<li>绿色底色标注表示资源的发起者(initiators)或依赖者(dependencies)</li>
<li>如果有多个绿色底色标注的资源，则表示资源的发起者或依赖者有多个<br><img src="https://developers.google.com/web/tools/chrome-devtools/profile/network-performance/imgs/initiators-dependencies.png" alt=""></li>
</ul>
<h5 id="u5BF9_u8BF7_u6C42_u8D44_u6E90_u5217_u8868_u7B5B_u9009"><a href="#u5BF9_u8BF7_u6C42_u8D44_u6E90_u5217_u8868_u7B5B_u9009" class="headerlink" title="对请求资源列表筛选"></a>对请求资源列表筛选</h5><ul>
<li>可通过资源列表上的title选择显示/隐藏（比如：显示All/XHR/JS/CSS…）,也可以按住cmd(mac)或ctrl(windows或Linux)进行多选</li>
<li>可通过筛选框进行文本匹配进行筛选(比如：搜索关键字,baidu；来匹配资源名字中包含baidu的资源项)</li>
<li>chrome提供了强大的关键字筛选器（比如：large-than:20k;将会筛选出资源大小超过20k的资源向）</li>
<li>列举几个chrome提供的常见的关键字筛选<ul>
<li><strong>domain</strong>：根据域名进行筛选</li>
<li><strong>larger-than</strong>：根据资源大小进行筛选</li>
<li><strong>mime-type</strong>：根据资源MINI类型进行筛选</li>
<li><strong>status-code</strong>：根据状态码进行筛选</li>
</ul>
</li>
</ul>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/profile/network-performance/imgs/larger-than.png" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;h5 id=&quot;u5185_u5BB9_u6765_u81EAGoogle_Developers&quot;&gt;&lt;a href=&quot;#u5185_u5BB9_u6765_u81EAGoogle_Developers&quot; class=&quot;headerlink&quot; title=&quot;内容来自Google D
    
    </summary>
    
    
      <category term="Chrome Developer Tools" scheme="http://xiuhonglee.com/tags/Chrome-Developer-Tools/"/>
    
  </entry>
  
  <entry>
    <title>移动端下touchmove event bug</title>
    <link href="http://xiuhonglee.com/2016/07/22/touchmoveBug/"/>
    <id>http://xiuhonglee.com/2016/07/22/touchmoveBug/</id>
    <published>2016-07-22T10:49:34.000Z</published>
    <updated>2016-07-22T10:59:05.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="u79FB_u52A8_u7AEF_u4E0Btouchmove_event_bug"><a href="#u79FB_u52A8_u7AEF_u4E0Btouchmove_event_bug" class="headerlink" title="移动端下touchmove event bug"></a>移动端下touchmove event bug</h3><p>问题描述：<strong>touchmove</strong> event 在移动端有一个严重bug.如果没有加下面一段代码，<code>touchemove event</code>只会触发一次.但如果在<code>toucestart event</code>上添加<code>preventDefault</code>添加<code>preventDefault()</code>即可解决.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">element.addEventListener(<span class="string">"touchstart"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">    onStart(e);</span><br><span class="line">&#125;, <span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">onStart</span>(<span class="params">touchEvent</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (navigator.userAgent.match(<span class="regexp">/Android/i</span>)) &#123;</span><br><span class="line">        touchEvent.preventDefault();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="u53C2_u8003"><a href="#u53C2_u8003" class="headerlink" title="参考"></a>参考</h4><p>1.<a href="http://stackoverflow.com/questions/11204460/the-touchmove-event-on-android-system-transformer-prime" target="_blank" rel="external">stackoverflow上问题描述</a><br>2.<a href="https://code.google.com/p/android/issues/detail?id=5491" target="_blank" rel="external">This bug is documented here</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;u79FB_u52A8_u7AEF_u4E0Btouchmove_event_bug&quot;&gt;&lt;a href=&quot;#u79FB_u52A8_u7AEF_u4E0Btouchmove_event_bug&quot; class=&quot;headerlink&quot; title=&quot;移动端下touc
    
    </summary>
    
    
      <category term="javascript" scheme="http://xiuhonglee.com/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>Vertical Percentages in CSS</title>
    <link href="http://xiuhonglee.com/2016/07/22/verticalPercent/"/>
    <id>http://xiuhonglee.com/2016/07/22/verticalPercent/</id>
    <published>2016-07-22T10:49:22.000Z</published>
    <updated>2016-07-22T10:58:44.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>问题描述：定位DOM元素时，遇到用margin的百分值来对其进行定位，不明白这里的百分比相对于哪个DOM来计算</p>
</blockquote>
<p><strong>下面是垂直方向上的百分比计算规则</strong></p>
<ol>
<li>padding/margin的top/bottom的百分比取值相对于其包含块的！！！宽度！！！</li>
<li>height（包括min/max）的百分比取值相对于包含块的！！！高度！！！</li>
<li>position元素的top/bottom相对于包含块的！！！高度！！！</li>
<li>百分比在border width上使用无效</li>
</ol>
<h4 id="MDN_u4E0A_u5BF9margin-top_u7684_u63CF_u8FF0"><a href="#MDN_u4E0A_u5BF9margin-top_u7684_u63CF_u8FF0" class="headerlink" title="MDN上对margin-top的描述"></a>MDN上对margin-top的描述</h4><p><img src="http://s16.mogucdn.com/p1/160721/upload_ie4tkmdfgiytqmtfhezdambqgqyde_1844x702.png" alt=""></p>
<h4 id="u53C2_u8003"><a href="#u53C2_u8003" class="headerlink" title="参考"></a>参考</h4><ol>
<li><a href="https://www.impressivewebs.com/vertical-percentages-css/" target="_blank" rel="external">Vertical Percentages in CSS</a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/margin-top" target="_blank" rel="external">MDN margin-top</a></li>
<li><a href="http://cssvalues.com/#margin%20" target="_blank" rel="external">CSS VALUES-查阅css属性值的网站</a></li>
<li><a href="https://jsfiddle.net/xiuhong/otqdzq1a/" target="_blank" rel="external">DEMO margin值</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;问题描述：定位DOM元素时，遇到用margin的百分值来对其进行定位，不明白这里的百分比相对于哪个DOM来计算&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;下面是垂直方向上的百分比计算规则&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
    
    </summary>
    
    
      <category term="css" scheme="http://xiuhonglee.com/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>csscomb</title>
    <link href="http://xiuhonglee.com/2016/07/21/csscomb/"/>
    <id>http://xiuhonglee.com/2016/07/21/csscomb/</id>
    <published>2016-07-21T10:57:59.000Z</published>
    <updated>2016-07-22T10:53:51.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="csscomb-json_u914D_u7F6E"><a href="#csscomb-json_u914D_u7F6E" class="headerlink" title="csscomb.json配置"></a>csscomb.json配置</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#10;    &#34;remove-empty-rulesets&#34;: true,&#10;    &#34;always-semicolon&#34;: true,&#10;    &#34;color-case&#34;: &#34;upper&#34;,&#10;    &#34;block-indent&#34;: &#34;\t&#34;,&#10;    &#34;color-shorthand&#34;: false,&#10;    &#34;element-case&#34;: &#34;lower&#34;,&#10;    &#34;eof-newline&#34;: true,&#10;    &#34;leading-zero&#34;: true,&#10;    &#34;quotes&#34;: &#34;double&#34;,&#10;    &#34;space-before-colon&#34;: &#34;&#34;,&#10;    &#34;space-after-colon&#34;: &#34; &#34;,&#10;    &#34;space-before-combinator&#34;: &#34; &#34;,&#10;    &#34;space-after-combinator&#34;: &#34; &#34;,&#10;    &#34;space-between-declarations&#34;: &#34;\n&#34;,&#10;    &#34;space-before-opening-brace&#34;: &#34; &#34;,&#10;    &#34;space-after-opening-brace&#34;: &#34;\n&#34;,&#10;    &#34;space-after-selector-delimiter&#34;: &#34; &#34;,&#10;    &#34;space-before-selector-delimiter&#34;: &#34;&#34;,&#10;    &#34;space-before-closing-brace&#34;: &#34;\n&#34;,&#10;    &#34;strip-spaces&#34;: true,&#10;    &#34;tab-size&#34;: true,&#10;    &#34;vendor-prefix-align&#34;: true&#10;&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;csscomb-json_u914D_u7F6E&quot;&gt;&lt;a href=&quot;#csscomb-json_u914D_u7F6E&quot; class=&quot;headerlink&quot; title=&quot;csscomb.json配置&quot;&gt;&lt;/a&gt;csscomb.json配置&lt;/h4&gt;&lt;figu
    
    </summary>
    
    
      <category term="工具" scheme="http://xiuhonglee.com/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>requestAnimationFrame</title>
    <link href="http://xiuhonglee.com/2016/07/13/requestAnimationFrame/"/>
    <id>http://xiuhonglee.com/2016/07/13/requestAnimationFrame/</id>
    <published>2016-07-13T11:29:15.000Z</published>
    <updated>2016-07-14T12:01:28.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="u672C_u8282_u5185_u5BB9"><a href="#u672C_u8282_u5185_u5BB9" class="headerlink" title="本节内容"></a>本节内容</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">requestAnimationFrame介绍</span><br><span class="line">requestAnimationFrame用法</span><br><span class="line">cancelAnimationFrame介绍</span><br><span class="line">综合示例-进度条动画</span><br></pre></td></tr></table></figure>
<h4 id="requestAnimationFrame_u4ECB_u7ECD"><a href="#requestAnimationFrame_u4ECB_u7ECD" class="headerlink" title="requestAnimationFrame介绍"></a>requestAnimationFrame介绍</h4><p><strong>特点</strong></p>
<ol>
<li>浏览器提供的定时循环操作，类似setTimeout，用于按帧对网页重绘</li>
<li>为网页上的各种动画效果（DOM动画、Canvas动画、SVG动画）提供统一的刷新机制</li>
</ol>
<p><strong>优势</strong></p>
<ol>
<li>充分利用浏览器的刷新机制，节省系统资源（显示器有固定的刷新频率，美妙最多刷新 60/75次，requestAnimationFrame的基本思想就是与这个刷新频率保持同步，利用这个刷新进行页面重绘）</li>
<li>一旦页面不处于浏览器的当前标签，就会自动停止刷新，节省资源</li>
</ol>
<h4 id="requestAnimationFrame_u7528_u6CD5"><a href="#requestAnimationFrame_u7528_u6CD5" class="headerlink" title="requestAnimationFrame用法"></a>requestAnimationFrame用法</h4><blockquote>
<p>requestAnimationFrame使用一个回调函数作为参数，这个回调函数会在浏览器重绘之前调用。<br><code>requestID = window.requestAnimationFrame</code></p>
</blockquote>
<a id="more"></a>
<p><strong>兼容性</strong></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">// 不支持的浏览器通过setTimeout降级处理</span><br><span class="line"> window.requestAnimFrame = (function()&#123;</span><br><span class="line">    return window.requestAnimationFrame       || </span><br><span class="line">           window.webkitRequestAnimationFrame || </span><br><span class="line">           window.mozRequestAnimationFrame    || </span><br><span class="line">           window.oRequestAnimationFrame      || </span><br><span class="line">           window.msRequestAnimationFrame     || </span><br><span class="line">           function( callback )&#123;</span><br><span class="line">              window.setTimeout(callback, 1000 / 60); // 每秒钟刷新60次，来模拟requestAnimationFrame</span><br><span class="line">          &#125;;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure>
<p><strong>类似setTimeout进行递归调用即可</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">repeatOften</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// Do whatever在这里进行操作</span></span><br><span class="line">  requestAnimationFrame(repeatOften);</span><br><span class="line">&#125;</span><br><span class="line">requestAnimationFrame(repeatOften);</span><br></pre></td></tr></table></figure></p>
<h4 id="cancelAnimationFrame_u4ECB_u7ECD"><a href="#cancelAnimationFrame_u4ECB_u7ECD" class="headerlink" title="cancelAnimationFrame介绍"></a>cancelAnimationFrame介绍</h4><blockquote>
<p>cancelAnimationFrame用于取消重绘</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 参数为任务ID</span></span><br><span class="line"><span class="built_in">window</span>.cancelAnimationFrame(requestID);</span><br></pre></td></tr></table></figure>
<h4 id="u7EFC_u5408_u793A_u4F8B"><a href="#u7EFC_u5408_u793A_u4F8B" class="headerlink" title="综合示例"></a>综合示例</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 进度条示例</span></span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="title">html</span> <span class="attribute">lang</span>=<span class="value">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">meta</span> <span class="attribute">charset</span>=<span class="value">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">title</span>&gt;</span>requestAnimation<span class="tag">&lt;/<span class="title">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">style</span>&gt;</span><span class="css"></span><br><span class="line"></span><br><span class="line">    <span class="id">#anim</span> <span class="rules">&#123;</span><br><span class="line">        <span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">0</span></span></span>;</span><br><span class="line">        <span class="rule"><span class="attribute">height</span>:<span class="value"> <span class="number">50px</span></span></span>;</span><br><span class="line">        <span class="rule"><span class="attribute">background-color</span>:<span class="value"> <span class="hexcolor">#83fcd8</span></span></span>;</span><br><span class="line">        <span class="rule"><span class="attribute">border-radius</span>:<span class="value"> <span class="number">25px</span></span></span>;</span><br><span class="line">        <span class="rule"><span class="attribute">position</span>:<span class="value"> absolute</span></span>;</span><br><span class="line">        <span class="rule"><span class="attribute">left</span>:<span class="value"> <span class="number">0</span></span></span>;</span><br><span class="line">        <span class="rule"><span class="attribute">top</span>:<span class="value"> <span class="number">50%</span></span></span>;</span><br><span class="line">        <span class="rule"><span class="attribute">position</span>:<span class="value"> absolute</span></span>;</span><br><span class="line">        <span class="rule"><span class="attribute">box-shadow</span>:<span class="value"> <span class="number">0</span> <span class="number">0</span> <span class="number">30px</span> <span class="function">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.2</span>)</span></span>;</span><br><span class="line">        <span class="rule"><span class="attribute">text-align</span>:<span class="value"> center</span></span>;</span><br><span class="line">        <span class="rule"><span class="attribute">line-height</span>:<span class="value"> <span class="number">50px</span></span></span>;</span><br><span class="line">    &#125;</span></span><br><span class="line"></span><br><span class="line"></span><span class="tag">&lt;/<span class="title">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"wrapper"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"anim"</span>&gt;</span>0%<span class="tag">&lt;/<span class="title">div</span>&gt;</span>         </span><br><span class="line">    <span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="title">button</span> <span class="attribute">style</span>=<span class="value">"width:100px;height:35px;background-color: #fff;border-radius: 3px;box-shadow: 5px;"</span>&gt;</span>进度条<span class="tag">&lt;/<span class="title">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="title">script</span>&gt;</span><span class="javascript"></span><br><span class="line"></span><br><span class="line">    <span class="built_in">window</span>.requestAnimationFrame = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line">        <span class="keyword">return</span>  <span class="built_in">window</span>.requestAnimationFrame   ||</span><br><span class="line">            <span class="built_in">window</span>.webkitRequestAnimationFrame ||</span><br><span class="line">            <span class="built_in">window</span>.mozRequestAnimationFrame    ||</span><br><span class="line">            <span class="function"><span class="keyword">function</span>(<span class="params"> callback </span>) </span>&#123;</span><br><span class="line">                <span class="built_in">window</span>.setTimeout(callback, <span class="number">1000</span> / <span class="number">60</span>);</span><br><span class="line">            &#125;;</span><br><span class="line">    &#125;)();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> start = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">var</span> ele = <span class="built_in">document</span>.getElementById(<span class="string">"anim"</span>);</span><br><span class="line">    <span class="keyword">var</span> progress = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">step</span>(<span class="params">timestamp</span>) </span>&#123;</span><br><span class="line">        progress += <span class="number">1</span>;</span><br><span class="line">        ele.style.width = progress + <span class="string">"%"</span>;</span><br><span class="line">        ele.innerHTML = progress + <span class="string">"%"</span>;</span><br><span class="line">        <span class="keyword">if</span> (progress &lt; <span class="number">100</span>) &#123;</span><br><span class="line">            requestAnimationFrame(step);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">document</span>.querySelector(<span class="string">'button'</span>).addEventListener(<span class="string">"click"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        ele.style.width = <span class="number">0</span>;</span><br><span class="line">        progress = <span class="number">0</span>;</span><br><span class="line">        requestAnimationFrame(step);</span><br><span class="line">    &#125;, <span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;u672C_u8282_u5185_u5BB9&quot;&gt;&lt;a href=&quot;#u672C_u8282_u5185_u5BB9&quot; class=&quot;headerlink&quot; title=&quot;本节内容&quot;&gt;&lt;/a&gt;本节内容&lt;/h4&gt;&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;requestAnimationFrame介绍&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;requestAnimationFrame用法&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cancelAnimationFrame介绍&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;综合示例-进度条动画&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;requestAnimationFrame_u4ECB_u7ECD&quot;&gt;&lt;a href=&quot;#requestAnimationFrame_u4ECB_u7ECD&quot; class=&quot;headerlink&quot; title=&quot;requestAnimationFrame介绍&quot;&gt;&lt;/a&gt;requestAnimationFrame介绍&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;特点&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;浏览器提供的定时循环操作，类似setTimeout，用于按帧对网页重绘&lt;/li&gt;
&lt;li&gt;为网页上的各种动画效果（DOM动画、Canvas动画、SVG动画）提供统一的刷新机制&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;优势&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;充分利用浏览器的刷新机制，节省系统资源（显示器有固定的刷新频率，美妙最多刷新 60/75次，requestAnimationFrame的基本思想就是与这个刷新频率保持同步，利用这个刷新进行页面重绘）&lt;/li&gt;
&lt;li&gt;一旦页面不处于浏览器的当前标签，就会自动停止刷新，节省资源&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&quot;requestAnimationFrame_u7528_u6CD5&quot;&gt;&lt;a href=&quot;#requestAnimationFrame_u7528_u6CD5&quot; class=&quot;headerlink&quot; title=&quot;requestAnimationFrame用法&quot;&gt;&lt;/a&gt;requestAnimationFrame用法&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;requestAnimationFrame使用一个回调函数作为参数，这个回调函数会在浏览器重绘之前调用。&lt;br&gt;&lt;code&gt;requestID = window.requestAnimationFrame&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="动画" scheme="http://xiuhonglee.com/tags/%E5%8A%A8%E7%94%BB/"/>
    
  </entry>
  
  <entry>
    <title>javascript加号运算符</title>
    <link href="http://xiuhonglee.com/2016/05/10/javascript-plus/"/>
    <id>http://xiuhonglee.com/2016/05/10/javascript-plus/</id>
    <published>2016-05-10T10:08:54.000Z</published>
    <updated>2016-05-10T10:35:37.000Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">JavaScript中的加号运算符</span><br><span class="line">使用场景</span><br></pre></td></tr></table></figure>
<h4 id="JavaScript_u4E2D_u7684_u52A0_u53F7_u8FD0_u7B97_u7B26"><a href="#JavaScript_u4E2D_u7684_u52A0_u53F7_u8FD0_u7B97_u7B26" class="headerlink" title="JavaScript中的加号运算符"></a>JavaScript中的加号运算符</h4><blockquote>
<p>通常，在JavaScript中的“+”运算符用来进行数字运算和字符串连接。但是，它也可作为一元运算符通过调用操作对象的valueOf()或toString()方法来使用。</p>
</blockquote>
<h4 id="u4F7F_u7528_u573A_u666F"><a href="#u4F7F_u7528_u573A_u666F" class="headerlink" title="使用场景"></a>使用场景</h4><p>1.获取时间戳</p>
<blockquote>
<p>The Date object has handy implementations for valueOf() and toString()</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="built_in">Date</span>().valueOf()</span><br><span class="line"><span class="comment">// 1369472124400 (milliseconds timestamp)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Date</span>().toString()</span><br><span class="line"><span class="comment">// "Sat May 25 2013 10:55:17 GMT+0200"</span></span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p>如果使用+运算符，或默认调用Date()的valueOf()方法来获取时间戳<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">+<span class="keyword">new</span> <span class="built_in">Date</span>()</span><br><span class="line"><span class="comment">// 1369472124400</span></span><br><span class="line"></span><br><span class="line">+<span class="keyword">new</span> <span class="built_in">Date</span>() === <span class="keyword">new</span> <span class="built_in">Date</span>().valueOf()</span><br><span class="line"><span class="comment">// true</span></span><br></pre></td></tr></table></figure></p>
<p>2.转换数字<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">+<span class="literal">true</span>   <span class="comment">// 1</span></span><br><span class="line">+<span class="literal">null</span>   <span class="comment">// 0</span></span><br><span class="line">+<span class="string">""</span>     <span class="comment">// 0</span></span><br><span class="line">+<span class="string">"2.0"</span>  <span class="comment">// 2</span></span><br><span class="line">+<span class="string">"2.5"</span>  <span class="comment">// 2.5</span></span><br></pre></td></tr></table></figure></p>
<p>这种方法比pareseInt(x, 10)更严格些<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">+<span class="string">"3asdf"</span>                <span class="comment">// NaN</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">"3asdf"</span>, <span class="number">10</span>)   <span class="comment">// 3</span></span><br></pre></td></tr></table></figure></p>
<p>3.重新原型valueOf来自定义“+”</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myCoercion;</span><br><span class="line"><span class="keyword">var</span> WeirdCoercion = <span class="function"><span class="keyword">function</span>(<span class="params">increment</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.increment = increment;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">WeirdCoercion.prototype.valueOf = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">10</span> + <span class="keyword">this</span>.increment;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">myCoercion = <span class="keyword">new</span> WeirdCoercion(<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// that's what we wanted to achieve</span></span><br><span class="line">+myCoercion     <span class="comment">// 15</span></span><br><span class="line"><span class="number">20</span> + myCoercion <span class="comment">// 35</span></span><br></pre></td></tr></table></figure>
<p>原文链接： ☞ <a href="http://frontendplay.com/2013/05/25/plus-sign-javascript/" target="_blank" rel="external">戳这里</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;JavaScript中的加号运算符&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;使用场景&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;JavaScript_u4E2D_u7684_u52A0_u53F7_u8FD0_u7B97_u7B26&quot;&gt;&lt;a href=&quot;#JavaScript_u4E2D_u7684_u52A0_u53F7_u8FD0_u7B97_u7B26&quot; class=&quot;headerlink&quot; title=&quot;JavaScript中的加号运算符&quot;&gt;&lt;/a&gt;JavaScript中的加号运算符&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;通常，在JavaScript中的“+”运算符用来进行数字运算和字符串连接。但是，它也可作为一元运算符通过调用操作对象的valueOf()或toString()方法来使用。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;u4F7F_u7528_u573A_u666F&quot;&gt;&lt;a href=&quot;#u4F7F_u7528_u573A_u666F&quot; class=&quot;headerlink&quot; title=&quot;使用场景&quot;&gt;&lt;/a&gt;使用场景&lt;/h4&gt;&lt;p&gt;1.获取时间戳&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The Date object has handy implementations for valueOf() and toString()&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Date&lt;/span&gt;().valueOf()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 1369472124400 (milliseconds timestamp)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Date&lt;/span&gt;().toString()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// &quot;Sat May 25 2013 10:55:17 GMT+0200&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="javascript" scheme="http://xiuhonglee.com/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>phantomas</title>
    <link href="http://xiuhonglee.com/2016/04/26/phantomas/"/>
    <id>http://xiuhonglee.com/2016/04/26/phantomas/</id>
    <published>2016-04-26T13:24:17.000Z</published>
    <updated>2016-04-28T01:38:16.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="u672C_u8282_u5185_u5BB9"><a href="#u672C_u8282_u5185_u5BB9" class="headerlink" title="本节内容"></a>本节内容</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">phantomas介绍</span><br><span class="line">Phantomas命令行下使用</span><br></pre></td></tr></table></figure>
<h4 id="Phantomas_u4ECB_u7ECD"><a href="#Phantomas_u4ECB_u7ECD" class="headerlink" title="Phantomas介绍"></a>Phantomas介绍</h4><p></p><p style="background:#f5f5d5;padding:10px;border-radius:3px">基于PhantomJS的web性能指标监控框架。这个名字有点意思☞<a href="https://en.wikipedia.org/wiki/Fant%C3%B4mas" target="_blank" rel="external">戳这里</a>；需要NodeJS环境、PhantomJS1.9+<br></p><p></p>
<h5 id="u5B89_u88C5"><a href="#u5B89_u88C5" class="headerlink" title="安装"></a>安装</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 下条命令会预先安装最新版本的phantomjs，同时通过添加软链接</span></span><br><span class="line"><span class="comment"># 的方式在全局添加phantomas命令(将./bin/phantomas.js添加到PATH中)</span></span><br><span class="line">$ npm install --global phantomas</span><br></pre></td></tr></table></figure>
<h5 id="u7279_u70B9"><a href="#u7279_u70B9" class="headerlink" title="特点"></a>特点</h5><ul>
<li>模块方法：每一个性能指标由独立模块负责实现</li>
<li>事件驱动：这点类似NodeJS，可以在phantomJS这里查找☞<a href="https://github.com/ariya/phantomjs/wiki/API-Reference-WebPage#webpage-onInitialized" target="_blank" rel="external">可监听事件名</a></li>
<li>可获取底层性能指标：如通过jQuery绑定的事件数目、高级选择器属性使用情况等</li>
<li>结果可以以JSON、CSV格式输出</li>
<li>方便集成到持续集成(CI)工具中（如：Jenkins）</li>
<li>有Node Module可供使用，方便集成到Node项目中（不过文档不怎么全）</li>
</ul>
<h4 id="Phantomas_u547D_u4EE4_u884C_u4E0B_u4F7F_u7528"><a href="#Phantomas_u547D_u4EE4_u884C_u4E0B_u4F7F_u7528" class="headerlink" title="Phantomas命令行下使用"></a>Phantomas命令行下使用</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 不过这样也只能在命令行下看结果</span></span><br><span class="line">$ phantomas https://github.com/macbre/phantomas --verbose</span><br><span class="line"></span><br><span class="line"><span class="comment"># 想要把结果存到json</span></span><br><span class="line">$ phantomas https://github.com/macbre/phantomas --verbose --reporter=json &gt; result.json</span><br></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;u672C_u8282_u5185_u5BB9&quot;&gt;&lt;a href=&quot;#u672C_u8282_u5185_u5BB9&quot; class=&quot;headerlink&quot; title=&quot;本节内容&quot;&gt;&lt;/a&gt;本节内容&lt;/h4&gt;&lt;figure class=&quot;highlight sh
    
    </summary>
    
    
      <category term="性能监控" scheme="http://xiuhonglee.com/tags/%E6%80%A7%E8%83%BD%E7%9B%91%E6%8E%A7/"/>
    
  </entry>
  
  <entry>
    <title>搭建Jenkins Server(安装Jenkins)</title>
    <link href="http://xiuhonglee.com/2016/04/16/jenkins/"/>
    <id>http://xiuhonglee.com/2016/04/16/jenkins/</id>
    <published>2016-04-16T02:13:11.000Z</published>
    <updated>2016-04-16T08:09:05.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="u672C_u8282_u5185_u5BB9"><a href="#u672C_u8282_u5185_u5BB9" class="headerlink" title="本节内容"></a>本节内容</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CentOS下安装Jenkins</span><br></pre></td></tr></table></figure>
<h4 id="u9700_u6C42/_u4FE1_u606F"><a href="#u9700_u6C42/_u4FE1_u606F" class="headerlink" title="需求/信息"></a>需求/信息</h4><ul>
<li>在远程Server上安装Jenkins，搭建CI环境</li>
<li>服务器在bandwagonhost(搬瓦工)购买的,安装速度够快~推荐</li>
<li>Server OS: CentOS</li>
</ul>
<h4 id="CentOS_u5B89_u88C5Jenkins"><a href="#CentOS_u5B89_u88C5Jenkins" class="headerlink" title="CentOS安装Jenkins"></a>CentOS安装Jenkins</h4><p><a href="wget -O /etc/yum.repos.d/jenkins.repo http://pkg.jenkins-ci.org/redhat/jenkins.repo">官网教程</a><br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>. ssh连接远程主机（服务器），下面是Mac连接方式</span><br><span class="line">[本地]$ ssh root@IpAddress -p </span><br><span class="line"></span><br><span class="line"><span class="number">2</span>. 进入远程主机安装Jenkins</span><br><span class="line">非root用户下面命令加sudo </span><br><span class="line">[远程主机]<span class="comment"># wget -O /etc/yum.repos.d/jenkins.repo http://pkg.jenkins-ci.org/redhat/jenkins.repo</span></span><br><span class="line">[远程主机]<span class="comment"># rpm --import https://jenkins-ci.org/redhat/jenkins-ci.org.key</span></span><br><span class="line">[远程主机]<span class="comment"># yum install jenkins</span></span><br><span class="line"></span><br><span class="line"><span class="number">3</span>. 安装Java</span><br><span class="line"><span class="comment"># yum install java</span></span><br><span class="line"></span><br><span class="line"><span class="number">4</span>. 启动/停止/重启Jenkins</span><br><span class="line"><span class="comment"># service jenkins start/stop/restart</span></span><br><span class="line"><span class="comment"># chkconfig jenkins on(这句检查是否成功，如果没有报错就说明成功了)</span></span><br><span class="line"></span><br><span class="line"><span class="number">5</span>. 如果上面步骤没有报错，此时就可以通过IP访问到Jenkins界面了</span><br><span class="line">[远程主机IP地址:端口] <span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">8080</span></span><br><span class="line"></span><br><span class="line"><span class="number">6</span>. 安装目录: /usr/lib/jenkins</span><br><span class="line"><span class="number">7</span>. jenkins配置文件: /etc/sysconfig</span><br></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;u672C_u8282_u5185_u5BB9&quot;&gt;&lt;a href=&quot;#u672C_u8282_u5185_u5BB9&quot; class=&quot;headerlink&quot; title=&quot;本节内容&quot;&gt;&lt;/a&gt;本节内容&lt;/h4&gt;&lt;figure class=&quot;highlight sh
    
    </summary>
    
    
      <category term="Jenkins" scheme="http://xiuhonglee.com/tags/Jenkins/"/>
    
  </entry>
  
  <entry>
    <title>linux常用命令(2)</title>
    <link href="http://xiuhonglee.com/2016/04/13/linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4-2/"/>
    <id>http://xiuhonglee.com/2016/04/13/linux常用命令-2/</id>
    <published>2016-04-13T02:01:22.000Z</published>
    <updated>2016-04-27T14:55:13.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="u672C_u8282_u5185_u5BB9"><a href="#u672C_u8282_u5185_u5BB9" class="headerlink" title="本节内容"></a>本节内容</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Linux定时执行任务</span><br><span class="line">Linux关闭进程</span><br></pre></td></tr></table></figure>
<h4 id="u8BBE_u7F6Eeditor_u6253_u5F00_u65B9_u5F0F"><a href="#u8BBE_u7F6Eeditor_u6253_u5F00_u65B9_u5F0F" class="headerlink" title="设置editor打开方式"></a>设置editor打开方式</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ EDITOR=vim; <span class="built_in">export</span> EDITOR</span><br></pre></td></tr></table></figure>
<h4 id="Linux_u5B9A_u65F6_u6267_u884C_u4EFB_u52A1"><a href="#Linux_u5B9A_u65F6_u6267_u884C_u4EFB_u52A1" class="headerlink" title="Linux定时执行任务"></a>Linux定时执行任务</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 命令格式 at[参数][时间] </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 命令功能：在一个指定的时间执行一个指定任务，只能执行一次</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 需要开启atd进程</span></span><br><span class="line">$ ps -ef | grep atd  查看</span><br><span class="line"></span><br><span class="line"><span class="comment"># mac下开启服务</span></span><br><span class="line">$ sudo launchctl unload -F /System/Library/LaunchDaemons/com.apple.atrun.plist</span><br><span class="line">$ sudo launchctl load -F /System/Library/LaunchDaemons/com.apple.atrun.plist</span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例</span></span><br><span class="line">$ at <span class="number">13</span>:<span class="number">00</span></span><br><span class="line">&gt;  ls </span><br><span class="line">&gt; &lt;EOT&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 详细用法如下</span></span><br><span class="line">$ man at</span><br></pre></td></tr></table></figure>
<h4 id="crontab"><a href="#crontab" class="headerlink" title="crontab"></a>crontab</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># mac下启动、关闭cron服务</span></span><br><span class="line">$ launchctl load -w /System/Library/LaunchDaemons/com.vix.cron.plist</span><br><span class="line">$ launchctl unload -w /System/Library/LaunchDaemons/com.vix.cron.plist</span><br><span class="line"></span><br><span class="line"><span class="comment">###  使用方法，step by step  ###</span></span><br><span class="line"><span class="number">1</span>. 设置crontab <span class="operator">-e</span> 默认打开浏览器，推荐用nano，vim可能会报错</span><br><span class="line">$ EDITOR=nano; <span class="built_in">export</span>=EDITOR</span><br><span class="line"><span class="number">2</span>. 编写任务crontab job</span><br><span class="line">$ crontab <span class="operator">-e</span>  // 这条命令会用nano打开编辑框，下面是每分钟执行下指定目录的脚本任务（一定要用绝对路径，脚本里也是）</span><br><span class="line">* * * * * /Users/xiuhong/xh_github/monitoring/gruntPhantomas/task.sh</span><br><span class="line"><span class="number">3</span>. 保存退出即可，crontab会自动运行</span><br><span class="line"></span><br><span class="line"><span class="comment">### 下面这个是我的脚本，一定要用绝对路径！！！包括命令也是  ###</span></span><br><span class="line"><span class="shebang">#!/bin/sh</span></span><br><span class="line">PATH=/usr/<span class="built_in">local</span>/bin:/usr/<span class="built_in">local</span>/sbin:~/bin:/usr/bin:/bin:/usr/sbin:/sbin</span><br><span class="line"><span class="built_in">cd</span> /Users/xiuhong/xh_github/monitoring/gruntPhantomas</span><br><span class="line">/usr/<span class="built_in">local</span>/bin/grunt</span><br></pre></td></tr></table></figure>
<h4 id="Linux_u5173_u95ED_u8FDB_u7A0B"><a href="#Linux_u5173_u95ED_u8FDB_u7A0B" class="headerlink" title="Linux关闭进程"></a>Linux关闭进程</h4><p>需求：node进程在后台开启，如何通过shell关闭<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看当前进程</span></span><br><span class="line">$ lsof -Pi | grep LISTEN</span><br><span class="line">mongod     <span class="number">8662</span> jacob    <span class="number">6</span>u  IPv4 <span class="number">0</span>x17ceae4e0970fbe9      <span class="number">0</span>t0  TCP localhost:<span class="number">27017</span> (LISTEN)</span><br><span class="line">mongod     <span class="number">8662</span> jacob    <span class="number">7</span>u  IPv4 <span class="number">0</span>x17ceae4e0f9c24b1      <span class="number">0</span>t0  TCP localhost:<span class="number">28017</span> (LISTEN)</span><br><span class="line">……</span><br><span class="line"></span><br><span class="line"><span class="comment"># 也可以这样查找</span></span><br><span class="line">$ netstat -nlp | grep :<span class="number">8341</span></span><br><span class="line">    </span><br><span class="line"><span class="comment"># 终止与node相关的服务</span></span><br><span class="line">$ killall node</span><br></pre></td></tr></table></figure></p>
<p><img src="/uploads/linux2-kill.png" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;u672C_u8282_u5185_u5BB9&quot;&gt;&lt;a href=&quot;#u672C_u8282_u5185_u5BB9&quot; class=&quot;headerlink&quot; title=&quot;本节内容&quot;&gt;&lt;/a&gt;本节内容&lt;/h4&gt;&lt;figure class=&quot;highlight sh
    
    </summary>
    
    
      <category term="Linux" scheme="http://xiuhonglee.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>gulp常用插件（1）</title>
    <link href="http://xiuhonglee.com/2016/04/08/gulp-plugins/"/>
    <id>http://xiuhonglee.com/2016/04/08/gulp-plugins/</id>
    <published>2016-04-08T06:37:14.000Z</published>
    <updated>2016-04-08T08:16:08.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="u672C_u8282_u5185_u5BB9"><a href="#u672C_u8282_u5185_u5BB9" class="headerlink" title="本节内容"></a>本节内容</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">自启动Node服务插件</span><br><span class="line">同一个项目使用Gulp和Grunt</span><br></pre></td></tr></table></figure>
<h4 id="u81EA_u542F_u52A8Node_u670D_u52A1"><a href="#u81EA_u542F_u52A8Node_u670D_u52A1" class="headerlink" title="自启动Node服务"></a>自启动Node服务</h4><p><cite style="background: #f5f5d5;padding:10px;">刚开始学习node时，每次修改完app.js，都去手动敲$ node app.js重启node Server，在stackoverflow上发现了gulp-develop-server这个插件<br></cite></p>
<ul>
<li>特点：task可以监听app.js文件变化，自动重启Node Server☞<a href="https://github.com/narirou/gulp-develop-server" target="_blank" rel="external">插件地址</a></li>
<li>监听文件变化需要结合gulp-livereload这个插件使用</li>
<li>server.restart == server.changed</li>
<li>下面是示例<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>),</span><br><span class="line">    server = <span class="built_in">require</span>(<span class="string">'gulp-develop-server'</span>),</span><br><span class="line">    livereload = <span class="built_in">require</span>(<span class="string">'gulp-livereload'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> options = &#123;</span><br><span class="line">    path: <span class="string">'./app.js'</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> serverFiles = [</span><br><span class="line">    <span class="string">'./app.js'</span></span><br><span class="line">];</span><br><span class="line"></span><br><span class="line">gulp.task(<span class="string">'server:start'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    server.listen(options, livereload.listen);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// If server scripts change, restart the server and then livereload.</span></span><br><span class="line">gulp.task(<span class="string">'default'</span>, [<span class="string">'server:start'</span>], <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">restart</span>(<span class="params">file</span>) </span>&#123;</span><br><span class="line">        server.changed(<span class="function"><span class="keyword">function</span>(<span class="params">error</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (!error) livereload.changed(file.path);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    gulp.watch(serverFiles).on(<span class="string">'change'</span>, restart);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
</li>
</ul>
<a id="more"></a>
<h4 id="u540C_u4E00_u4E2A_u9879_u76EE_u4F7F_u7528Gulp_u548CGrunt"><a href="#u540C_u4E00_u4E2A_u9879_u76EE_u4F7F_u7528Gulp_u548CGrunt" class="headerlink" title="同一个项目使用Gulp和Grunt"></a>同一个项目使用Gulp和Grunt</h4><p><cite style="background: #f5f5d5;padding:10px;">有这样一个需求，要在项目中使用grunt-phantomas这个插件做自动化监控，可是项目当初使用的Gulp。难道为要为了使用这个插件弃用Gulp？果然：我遇到的每个问题已经有100个人（何止）也遇到过，找到了解决方案，就是（gulp-grunt，This classifies gulp-grunt as gulpfriendly, not a gulpplugin.）☞<a href="https://www.npmjs.com/package/gulp-grunt" target="_blank" rel="external">地址</a><br></cite></p>
<h5 id="u6B65_u9AA4_u4E00"><a href="#u6B65_u9AA4_u4E00" class="headerlink" title="步骤一"></a>步骤一</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install gulp-grunt --save-dev</span><br></pre></td></tr></table></figure>
<blockquote>
<p>gulp和grunt可以共用package.json，它们的插件可以放在一起</p>
</blockquote>
<h5 id="u6B65_u9AA4_u4E8C"><a href="#u6B65_u9AA4_u4E8C" class="headerlink" title="步骤二"></a>步骤二</h5><p>新建Gruntfile.js文件，gulpfile.js和Gruntfile.js里写各自的task即可。</p>
<h5 id="u6B65_u9AA4_u4E09"><a href="#u6B65_u9AA4_u4E09" class="headerlink" title="步骤三"></a>步骤三</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Gruntfile.js里的uglify task</span></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span>(<span class="params">grunt</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// Project configuration.</span></span><br><span class="line">    grunt.initConfig(&#123;</span><br><span class="line">        pkg: grunt.file.readJSON(<span class="string">'package.json'</span>),</span><br><span class="line">        uglify: &#123;</span><br><span class="line">            options: &#123;</span><br><span class="line">            &#125;,</span><br><span class="line">            build: &#123;</span><br><span class="line">                src: <span class="string">'public/js/index.js'</span>,</span><br><span class="line">                dest: <span class="string">'build/index.min.js'</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Load the plugin that provides the "uglify" task.</span></span><br><span class="line">    grunt.loadNpmTasks(<span class="string">'grunt-contrib-uglify'</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Default task(s).</span></span><br><span class="line">    grunt.registerTask(<span class="string">'uglify'</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Gulpfile.js里的uglify task</span></span><br><span class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>);</span><br><span class="line"><span class="built_in">require</span>(<span class="string">'gulp-grunt'</span>)(gulp); <span class="comment">// 重点是这句，建立了gulp-grunt的连接机制</span></span><br><span class="line">gulp.task(<span class="string">'grunt-uglify'</span>); <span class="comment">// 然后就可以调用grunt的task</span></span><br></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;u672C_u8282_u5185_u5BB9&quot;&gt;&lt;a href=&quot;#u672C_u8282_u5185_u5BB9&quot; class=&quot;headerlink&quot; title=&quot;本节内容&quot;&gt;&lt;/a&gt;本节内容&lt;/h4&gt;&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;自启动Node服务插件&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;同一个项目使用Gulp和Grunt&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;u81EA_u542F_u52A8Node_u670D_u52A1&quot;&gt;&lt;a href=&quot;#u81EA_u542F_u52A8Node_u670D_u52A1&quot; class=&quot;headerlink&quot; title=&quot;自启动Node服务&quot;&gt;&lt;/a&gt;自启动Node服务&lt;/h4&gt;&lt;p&gt;&lt;cite style=&quot;background: #f5f5d5;padding:10px;&quot;&gt;刚开始学习node时，每次修改完app.js，都去手动敲$ node app.js重启node Server，在stackoverflow上发现了gulp-develop-server这个插件&lt;br&gt;&lt;/cite&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;特点：task可以监听app.js文件变化，自动重启Node Server☞&lt;a href=&quot;https://github.com/narirou/gulp-develop-server&quot;&gt;插件地址&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;监听文件变化需要结合gulp-livereload这个插件使用&lt;/li&gt;
&lt;li&gt;server.restart == server.changed&lt;/li&gt;
&lt;li&gt;下面是示例&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; gulp = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;gulp&#39;&lt;/span&gt;),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    server = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;gulp-develop-server&#39;&lt;/span&gt;),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    livereload = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;gulp-livereload&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; options = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    path: &lt;span class=&quot;string&quot;&gt;&#39;./app.js&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; serverFiles = [&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&#39;./app.js&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;gulp.task(&lt;span class=&quot;string&quot;&gt;&#39;server:start&#39;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    server.listen(options, livereload.listen);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// If server scripts change, restart the server and then livereload.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;gulp.task(&lt;span class=&quot;string&quot;&gt;&#39;default&#39;&lt;/span&gt;, [&lt;span class=&quot;string&quot;&gt;&#39;server:start&#39;&lt;/span&gt;], &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;restart&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;file&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        server.changed(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;error&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (!error) livereload.changed(file.path);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    gulp.watch(serverFiles).on(&lt;span class=&quot;string&quot;&gt;&#39;change&#39;&lt;/span&gt;, restart);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="Gulp" scheme="http://xiuhonglee.com/tags/Gulp/"/>
    
  </entry>
  
</feed>
